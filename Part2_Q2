int main(){
    vector<char> tasks = {'A','A', 'A', 'B', 'B', 'B'};
    int n = 2;
    int time = 0;
    queue<pair<int, int>> myQueue;
    queue<int> frequencies;

    unordered_map<char , int> counters;
    for (auto task : tasks) {
        counters[task]++;
    }
    vector<int> freq;
    for (auto& entry : counters) {
        freq.push_back(entry.second);
    }
    sort(freq.rbegin(), freq.rend());
    for(auto x : freq){
        frequencies.push(-1* x);
    }
    while (!frequencies.empty() || !myQueue.empty()){
        time++;
        if (!frequencies.empty()) {
            int newFreq = frequencies.front() + 1;
            frequencies.pop();

            if (newFreq != 0) {
                myQueue.push({newFreq, n + time});
            }
        }
        if (time == myQueue.front().second){
            frequencies.push(myQueue.front().first);
            myQueue.pop();
        }
    }
    cout << time ;
    return 0;
}
