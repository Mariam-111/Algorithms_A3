#include <bits/stdc++.h>
using namespace std;

struct node {
    int parent;
    int rank;
};
struct Edge {
    int src;
    int dst;
    int wt;
};

vector<node> dsuf;
vector<Edge> mst;

// FIND operation with bounds check
int find(int v) {
    if (dsuf[v].parent == -1)
        return v;
    return dsuf[v].parent = find(dsuf[v].parent); // Path compression
}

// UNION operation with bounds check
void union_op(int fromP, int toP) {
    if (dsuf[fromP].rank > dsuf[toP].rank)
        dsuf[toP].parent = fromP;
    else if (dsuf[fromP].rank < dsuf[toP].rank)
        dsuf[fromP].parent = toP;
    else {
        dsuf[fromP].parent = toP;
        dsuf[toP].rank += 1;
    }
}

bool comparator(Edge a, Edge b) {
    return a.wt < b.wt;
}

void Kruskals(vector<Edge>& edge_List, int V, int E) {
    sort(edge_List.begin(), edge_List.end(), comparator);

    int i = 0, j = 0;
    while (i < V - 1 && j < E) {
        int fromP = find(edge_List[j].src);
        int toP = find(edge_List[j].dst);

        if (fromP == toP) {
            ++j;
            continue;
        }

        union_op(fromP, toP);
        mst.push_back(edge_List[j]);
        ++i;
    }
}

int main() {
    // N > num odf cities (vertex)   M > num of roads (edge)
    int N, M , counter = 0;
    cin >> N >> M;

    //price of gold and silver in tugriks
    int G , S ;
    cin >> G >> S;

    dsuf.resize(N);
    for (int i = 0; i < M; ++i) {
        dsuf[i].parent = -1;
        dsuf[i].rank = 0;
    }

    vector<Edge> edge_List;
    for (int i = 0; i < N; ++i) {
        int from, to, g , s ;
        cin >> from >> to >> g >> s;
        int wt = g+s ;
        // if we calc cost with tugriks
        // int wt = (g*G) + (s*S);
        Edge temp;
        // convert to 0-based
        temp.src = from -1 ;
        temp.dst = to -1 ;
        temp.wt = wt;
        edge_List.push_back(temp);
    }

    Kruskals(edge_List, N, M);

    if (mst.size() != N - 1) {
        cout << -1 << endl; // graph is not connected
        return 0;
    }

    for (auto p : mst) {
        counter += p.wt;
    }
    cout << counter << endl;

    return 0;
}
